import os
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)

from flask import Flask, jsonify, request
import openai
import requests
import uuid
import time
from dotenv import load_dotenv
from flask_cors import CORS
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (–ª–æ–∫–∞–ª—å–Ω–æ)
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")
openai.proxy = {}  # –Ø–≤–Ω–æ –æ—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–æ–∫—Å–∏

JIVOCHAT_WEBHOOK_URL = os.getenv(
    "JIVOCHAT_WEBHOOK_URL",
    "https://bot.jivosite.com/webhooks/WEVYtVZzXuYaG3/mygpttoken123",
)

@app.route("/", methods=["GET"])
def index():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    return jsonify({"message": "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! üü¢"}), 200

@app.route("/mygpttoken123", methods=["POST"])
def handle_request():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç JivoChat —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /mygpttoken123: URL={request.url}, Data={request.json}")
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Jivo: {data}")

        event = data.get("event", "")
        chat_id = data.get("chat_id", "")
        client_id = data.get("client_id", "")
        user_message = data.get("message", {}).get("text", data.get("text", ""))

        if not user_message or not chat_id or event != "CLIENT_MESSAGE":
            return (
                jsonify(
                    {
                        "error": {
                            "code": "invalid_request",
                            "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç Jivo",
                        }
                    }
                ),
                400,
            )

        logger.info("‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ ChatCompletions...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ completions.create, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å openai>=1.0.0
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_message}]
        )

        response_message = response.choices[0].message.content.strip()

        send_response_to_jivochat(response_message, chat_id, client_id)

        logger.info(f"üì© –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response_message}")
        return jsonify({"message": response_message}), 200

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({"error": {"code": "server_error", "message": str(e)}}), 500


def send_response_to_jivochat(response_message, chat_id, client_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ JivoChat —á–µ—Ä–µ–∑ webhook."""
    if not JIVOCHAT_WEBHOOK_URL:
        logger.warning("JIVOCHAT_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return

    headers = {"Content-Type": "application/json"}
    data = {
        "id": str(uuid.uuid4()),
        "event": "BOT_MESSAGE",
        "client_id": client_id,
        "chat_id": chat_id,
        "message": {
            "type": "TEXT",
            "text": response_message,
            "timestamp": int(time.time()),
        },
    }

    try:
        logger.info(
            f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ JivoChat –Ω–∞ URL: {JIVOCHAT_WEBHOOK_URL}, –î–∞–Ω–Ω—ã–µ: {data}"
        )
        response = requests.post(
            JIVOCHAT_WEBHOOK_URL, json=data, headers=headers, timeout=3
        )
        logger.info(
            f"üì® –û—Ç–≤–µ—Ç –æ—Ç JivoChat: —Å—Ç–∞—Ç—É—Å={response.status_code}, —Ç–µ–ª–æ={response.text}"
        )
        if response.status_code == 200:
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ JivoChat")
        else:
            logger.error(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ JivoChat: {response.status_code} - {response.text}"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ JivoChat: {str(e)}")


if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
