from flask import Flask, jsonify, request
import openai
import os
import requests
from dotenv import load_dotenv
from flask_cors import CORS
import logging
import time

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (–ª–æ–∫–∞–ª—å–Ω–æ)
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")
AGENT_ID = os.getenv("AGENT_ID", None)  # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ID
JIVOCHAT_WEBHOOK_URL = os.getenv("JIVOCHAT_WEBHOOK_URL")

# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ OpenAI –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ AGENT_ID –Ω–µ –∑–∞–¥–∞–Ω)
if not AGENT_ID:
    def create_agent():
        response = openai.beta.assistants.create(
            name="–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            instructions="""
–¢—ã ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.  
–í–ê–ñ–ù–û: –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ—ç—Ç–∞–ø–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –≤–∏–¥–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.
–¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –∫–∞–∫–æ–≥–æ —Å–∞–π—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—à–µ–ª –∫–ª–∏–µ–Ω—Ç.
2. –£—Ç–æ—á–Ω–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç, —Ç–∏—Ä–∞–∂ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
3. –°–ø—Ä–æ—Å–∏, –∫–∞–∫–æ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ 1 –ø–æ–¥–∞—Ä–æ–∫
4. –°–ø—Ä–æ—Å–∏, –µ—Å—Ç—å –ª–∏ –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞–∫–µ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.
5. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –ø–æ–ø—Ä–æ—Å–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.
–û–±—â–∞–π—Å—è –≤–µ–∂–ª–∏–≤–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–∞ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞. –í—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ç–æ–¥–∏–∫–∏ –∏–∑ –∫–Ω–∏–≥–∏ –°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂. –ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ö–æ–ª–æ–¥–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –î–º–∏—Ç—Ä–∏—è –¢–∫–∞—á–µ–Ω–∫–æ. 
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é - –±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–ª—å–∫–æ —Å —Å–∞–π—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏ –æ–±—Ä–∞—Ç–∏–ª—Å—è –∫ —Ç–µ–±–µ.
""",
            tools=[{"type": "code_interpreter"}],
            model="gpt-4o"
        )
        return response.id

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ AGENT_ID –Ω–µ —É–∫–∞–∑–∞–Ω
    AGENT_ID = os.getenv("AGENT_ID", create_agent())
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≥–µ–Ω—Ç —Å ID: {AGENT_ID}")

@app.route('/', methods=['GET'])
def index():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    return jsonify({"message": "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! üü¢"}), 200

@app.route('/mygpttoken123', methods=['GET', 'POST'])
def handle_request():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç JivoChat –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö GET-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /mygpttoken123: URL={request.url}, Method={request.method}, Data={request.json}")
    try:
        if request.method == 'POST':
            data = request.json
            user_message = data.get('message', data.get('text', ''))
            chat_id = data.get('chat_id', '')  # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ Jivo
            if not user_message:
                return jsonify({"error": "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400

            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –≤ OpenAI...")
            thread = openai.beta.threads.create(
                messages=[{"role": "user", "content": user_message}],
                assistant_id=AGENT_ID
            )
            run = openai.beta.threads.runs.create(thread_id=thread.id, assistant_id=AGENT_ID)

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º-–∞—É—Ç–æ–º (10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Jivo)
            max_wait_time = 10
            start_time = time.time()
            while time.time() - start_time < max_wait_time:
                run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                if run_status.status == "completed":
                    break
                time.sleep(1)

            if run_status.status != "completed":
                return jsonify({"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI"}), 504

            messages = openai.beta.threads.messages.list(thread_id=thread.id)
            response_message = messages.data[0].content[0].text.value if messages.data else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ JivoChat
            send_response_to_jivochat(response_message, chat_id)

            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response_message}")
            return jsonify({"message": response_message}), 200
        elif request.method == 'GET':
            return jsonify({"message": "–¢–µ—Å—Ç–æ–≤—ã–π GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /mygpttoken123"}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

def send_response_to_jivochat(response_message, chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ JivoChat —á–µ—Ä–µ–∑ webhook."""
    if not JIVOCHAT_WEBHOOK_URL:
        logger.warning("JIVOCHAT_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return

    headers = {'Content-Type': 'application/json'}
    data = {
        "text": response_message,  # Jivo –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–µ "text"
        "chat_id": chat_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    }

    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ JivoChat –Ω–∞ URL: {JIVOCHAT_WEBHOOK_URL}, –î–∞–Ω–Ω—ã–µ: {data}")
        response = requests.post(JIVOCHAT_WEBHOOK_URL, json=data, headers=headers, timeout=10)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç JivoChat: —Å—Ç–∞—Ç—É—Å={response.status_code}, —Ç–µ–ª–æ={response.text}")
        if response.status_code == 200:
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ JivoChat")
        else:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ JivoChat: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ JivoChat: {str(e)}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
    port = int(os.getenv("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
